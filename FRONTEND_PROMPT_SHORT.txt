‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                                                                           ‚ïë
‚ïë              ‚ö†Ô∏è  G·ª¨I PROMPT N√ÄY CHO FRONTEND TEAM ‚ö†Ô∏è                    ‚ïë
‚ïë                                                                           ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

---

## üìã FRONTEND TASK: Implement QuantityID (Multiple Courts)

**Priority:** CRITICAL - Backend ready, waiting frontend
**Deadline:** ASAP
**Status:** Backend ‚úÖ DONE, Frontend ‚è≥ TODO

---

## üéØ WHAT FRONTEND NEEDS TO DO

### Task 1: Send `quantity_id` When Booking

**Change this:**
```json
POST /api/bookings/create
{
  "fieldCode": 68,
  "playDate": "2025-10-21",
  "startTime": "08:00",
  "endTime": "09:00",
  "customerName": "User",
  "customerEmail": "user@email.com",
  "customerPhone": "0123456789"
}
```

**To this:**
```json
POST /api/bookings/create
{
  "fieldCode": 68,
  "quantity_id": 4,              // ‚úÖ ADD THIS - Court number (1-4)
  "playDate": "2025-10-21",
  "startTime": "08:00",
  "endTime": "09:00",
  "customerName": "User",
  "customerEmail": "user@email.com",
  "customerPhone": "0123456789"
}
```

---

### Task 2: Fetch Available Courts Before Booking

**When user selects time slot, call:**
```
GET /api/fields/:fieldCode/available-quantities
    ?playDate=2025-10-21
    &startTime=08:00
    &endTime=09:00
```

**Backend returns:**
```json
{
  "data": {
    "availableQuantities": [
      { "quantity_id": 1, "quantity_number": 1 },
      { "quantity_id": 3, "quantity_number": 3 }
    ],
    "bookedQuantities": [
      { "quantity_id": 2, "quantity_number": 2 },
      { "quantity_id": 4, "quantity_number": 4 }
    ]
  }
}
```

---

### Task 3: Show Available Courts to User

**Current UI:**
```
Khung gi·ªù: ‚òë Tr·ªëng ‚òê Kho√°
```

**New UI:**
```
Ch·ªçn s√¢n:
‚òë S√¢n 1 (tr·ªëng)         ‚Üê User can click
‚òê S√¢n 2 (ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t)   ‚Üê Disabled
‚òë S√¢n 3 (tr·ªëng)         ‚Üê User can click
‚òê S√¢n 4 (ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t)   ‚Üê Disabled

[ƒê·∫∑t s√¢n]
```

---

### Task 4: Handle Error When Booking Booked Court

**If user tries to book already-booked court:**
```
Backend returns 409:
{
  "statusCode": 409,
  "error": {
    "message": "S√¢n n√†y ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t trong khung gi·ªù n√†y"
  }
}
```

**Frontend should:**
- Show error to user
- Refresh available courts
- Ask user to select different court

---

## üìù CODE EXAMPLE (React)

```javascript
const [selectedCourt, setSelectedCourt] = useState(null);
const [availableCourts, setAvailableCourts] = useState([]);

// When time slot selected
async function onTimeSlotSelected(playDate, startTime, endTime) {
  // Get available courts
  const res = await fetch(
    `/api/fields/${fieldCode}/available-quantities?playDate=${playDate}&startTime=${startTime}&endTime=${endTime}`
  );
  const data = await res.json();
  setAvailableCourts(data.data.availableQuantities);
}

// Show courts
{availableCourts.map(court => (
  <label key={court.quantity_id}>
    <input
      type="radio"
      value={court.quantity_id}
      onChange={(e) => setSelectedCourt(Number(e.target.value))}
    />
    S√¢n {court.quantity_number}
  </label>
))}

// Send booking
async function booking() {
  if (!selectedCourt) {
    alert('Vui l√≤ng ch·ªçn s√¢n');
    return;
  }
  
  const res = await fetch('/api/bookings/create', {
    method: 'POST',
    body: JSON.stringify({
      fieldCode,
      quantity_id: selectedCourt,  // ‚úÖ SEND THIS!
      playDate,
      startTime,
      endTime,
      customerName,
      customerEmail,
      customerPhone
    })
  });
  
  if (!res.ok) {
    const error = await res.json();
    alert(error.error.message); // Show error
    onTimeSlotSelected(playDate, startTime, endTime); // Refresh
    return;
  }
  
  // Success
  const booking = await res.json();
  console.log('Booking success:', booking);
}
```

---

## ‚úÖ CHECKLIST

Frontend needs to:
- [ ] Add `quantity_id` to booking request
- [ ] Call available-quantities API when time slot selected
- [ ] Show available courts as selectable options
- [ ] Disable booked courts
- [ ] Require user to select court before booking
- [ ] Send selected `quantity_id` to backend
- [ ] Handle 409 error for booked courts
- [ ] Test all scenarios

---

## üß™ TEST CASES

**Test 1:** Book court 1
- [ ] Court 1 shows as available
- [ ] Can select and book
- [ ] Backend saves QuantityID = 1

**Test 2:** Book court 2 at same time
- [ ] Court 2 shows as available
- [ ] Can select and book
- [ ] Both courts booked successfully

**Test 3:** Try to book same court twice
- [ ] Second attempt shows 409 error
- [ ] Error message: "S√¢n n√†y ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t trong khung gi·ªù n√†y"
- [ ] Can select different court and book

**Test 4:** All courts booked
- [ ] availableQuantities = [] (empty)
- [ ] Show message: "Kh√¥ng c√≥ s√¢n n√†o tr·ªëng"
- [ ] Disable booking button

---

## üîó BACKEND STATUS

‚úÖ POST /api/bookings/create - READY (accepts quantity_id)
‚úÖ GET /api/fields/:id/available-quantities - READY
‚úÖ Prevents double-booking - READY
‚úÖ Saves QuantityID correctly - READY

**Backend waiting for frontend to integrate!**

---

## üìû KEY POINTS

- `quantity_id` MUST be a NUMBER (1, 2, 3, 4)
- MUST fetch available-quantities before showing courts
- MUST require user to select court
- MUST send quantity_id with booking request
- MUST handle 409 error gracefully
- For multiple slots, use SAME quantity_id for all slots!

---

## üöÄ QUICK START

1. Update booking request to include `quantity_id`
2. Fetch available-quantities API
3. Show courts as radio buttons
4. Require selection before booking
5. Test with backend

**That's it! Let's go! üéâ**

---

üìå Full details in: FRONTEND_PROMPT_QUANTITY_ID_FIX.md

