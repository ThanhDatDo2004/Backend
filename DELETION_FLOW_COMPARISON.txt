═══════════════════════════════════════════════════════════════════════════════
                   BEFORE vs AFTER - DELETE FIELD FIX
═══════════════════════════════════════════════════════════════════════════════

BEFORE (BROKEN - 500 ERROR)
─────────────────────────────────────────────────────────────────────────────────

Request:  DELETE /api/shops/me/fields/30

Flow in deleteFieldForShop():
  1. Check shop ownership ✓
  2. Check field exists ✓  
  3. Check no future bookings ✓
  4. Delete images from storage ✓
  5. Delete from Field_Images table ✓
  6. Try to DELETE from Fields table ✗ FAIL!
     
     ❌ Error: Foreign key constraint fails
        Cannot delete Fields(30) because Field_Pricing still has records
        with FieldCode=30

Response:  
  {
    "success": false,
    "statusCode": 500,
    "data": null,
    "error": {
      "status": "error",
      "message": "Cannot delete or update a parent row: a foreign key 
                 constraint fails (`thuere`.`Field_Pricing`, CONSTRAINT 
                 `FK_FieldPricing_Fields` FOREIGN KEY (`FieldCode`) REFERENCES 
                 `Fields` (`FieldCode`))"
    }
  }


AFTER (FIXED - SUCCESS)
─────────────────────────────────────────────────────────────────────────────────

Request:  DELETE /api/shops/me/fields/30

Flow in deleteFieldForShop():
  1. Check shop ownership ✓
  2. Check field exists ✓
  3. Check no future bookings ✓
  4. Delete images from storage ✓
  5. Delete from Field_Images table ✓
  6. Delete from Field_Pricing table ✓  ← NEW STEP!
  7. Delete from Fields table ✓

Response:
  {
    "success": true,
    "statusCode": 200,
    "data": {
      "deleted": true
    },
    "error": null,
    "message": "Xóa sân thành công"
  }


CODE CHANGES SUMMARY
─────────────────────────────────────────────────────────────────────────────────

FILE 1: backend/src/models/field.model.ts
─────────
  Added new method at line 386:
  
    async deleteAllPricingForField(fieldCode: number) {
      const query = `DELETE FROM Field_Pricing WHERE FieldCode = ?`;
      const result = await queryService.execQuery(query, [fieldCode]);
      if (typeof result === "boolean") return result ? 1 : 0;
      return Number((result as ResultSetHeader)?.affectedRows ?? 0);
    }


FILE 2: backend/src/services/field.service.ts
──────
  Modified lines 537-539 in deleteFieldForShop():
  
  OLD:
    await fieldModel.deleteAllImagesForField(fieldCode);
    const ok = await fieldModel.hardDeleteField(fieldCode);
    return ok ? { deleted: true } : null;
  
  NEW:
    await fieldModel.deleteAllImagesForField(fieldCode);
    await fieldModel.deleteAllPricingForField(fieldCode);  ← ADDED
    const ok = await fieldModel.hardDeleteField(fieldCode);
    return ok ? { deleted: true } : null;


KEY POINTS
─────────────────────────────────────────────────────────────────────────────────

✓ Respects MySQL Foreign Key constraints
✓ Maintains data integrity
✓ Deletes in correct order: Images → Pricing → Field
✓ No API changes needed
✓ No frontend changes needed
✓ Works with existing error handling
✓ Soft delete functionality unchanged

═══════════════════════════════════════════════════════════════════════════════
