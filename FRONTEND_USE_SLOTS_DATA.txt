‚úÖ SLOTS DATA ALREADY IN API RESPONSE
=====================================

GOOD NEWS: Backend ƒë√£ tr·∫£ v·ªÅ slots data!

GET /api/shops/me/bookings Response:
{
  "data": [
    {
      "BookingCode": "BK-123",
      "TotalPrice": 100000,
      "BookingStatus": "confirmed",
      "PaymentStatus": "paid",
      "slots": [
        {
          "Slot_ID": 1,
          "PlayDate": "2025-10-25",
          "StartTime": "10:00",
          "EndTime": "11:00",
          "Status": "pending"
        },
        {
          "Slot_ID": 2,
          "PlayDate": "2025-10-25",
          "StartTime": "11:00",
          "EndTime": "12:00",
          "Status": "pending"
        }
      ]
    }
  ]
}

HOW TO USE IN FRONTEND:
======================

CURRENT (maybe):
const bookings = await fetchShopBookingsForRevenue();
bookings.forEach(b => {
  console.log(b.TotalPrice);
  // No slots info
});

UPDATED:
const bookings = await fetchShopBookingsForRevenue();
bookings.forEach(b => {
  console.log(b.TotalPrice);
  
  // ADD THIS:
  b.slots.forEach(slot => {
    console.log(`${slot.PlayDate} ${slot.StartTime}-${slot.EndTime}`);
  });
});

IN TABLE DISPLAY:
=================

<table>
  <tr>
    <th>M√£ ƒê∆°n</th>
    <th>S√¢n</th>
    <th>Ng√†y/Gi·ªù</th>
    <th>T·ªïng Ti·ªÅn</th>
    <th>Th·ª±c Thu</th>
  </tr>
  {bookings.map(b => (
    <tr key={b.BookingCode}>
      <td>{b.BookingCode}</td>
      <td>{b.FieldName}</td>
      <td>
        {b.slots.map(slot => (
          <div key={slot.Slot_ID}>
            {slot.PlayDate} {slot.StartTime}-{slot.EndTime}
          </div>
        ))}
      </td>
      <td>{b.TotalPrice}</td>
      <td>{b.TotalPrice * 0.95}</td>
    </tr>
  ))}
</table>

REACT EXAMPLE:
==============

const ShopRevenueTable = ({ bookings }) => {
  return (
    <table>
      <tbody>
        {bookings.map(booking => (
          <tr key={booking.BookingCode}>
            <td>{booking.BookingCode}</td>
            <td>
              {booking.slots.map(slot => (
                <div key={slot.Slot_ID}>
                  üìÖ {slot.PlayDate}
                  ‚è∞ {slot.StartTime} - {slot.EndTime}
                </div>
              ))}
            </td>
            <td>{booking.TotalPrice.toLocaleString()}ƒë</td>
            <td>{(booking.TotalPrice * 0.95).toLocaleString()}ƒë</td>
          </tr>
        ))}
      </tbody>
    </table>
  );
};

FORMATTING OPTIONS:
===================

Option 1 - Compact:
2025-10-25 10:00-11:00

Option 2 - Readable:
25/10/2025 10:00 - 11:00

Option 3 - With Date Format:
Th·ª© 6, 25 th√°ng 10 nƒÉm 2025 10:00 - 11:00

JAVASCRIPT FORMATTING:
======================

// Format date
const formatDate = (dateStr) => {
  return new Date(dateStr).toLocaleDateString('vi-VN');
};

// Format slot
const formatSlot = (slot) => {
  return `${formatDate(slot.PlayDate)} ${slot.StartTime}-${slot.EndTime}`;
};

// Usage
slot.forEach(s => console.log(formatSlot(s)));

THAT'S IT!
==========

Backend API already has slots data.
Just use: booking.slots in frontend!

No new API needed.

