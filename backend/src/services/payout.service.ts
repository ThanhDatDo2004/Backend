import payoutModel from "../models/payout.model";
import ApiError from "../utils/apiErrors";
import { StatusCodes } from "http-status-codes";
import authService from "./auth";
import { sendVerificationEmail, sendMail } from "./mail.service";

/**
 * T·∫°o y√™u c·∫ßu r√∫t ti·ªÅn
 */
export async function createPayoutRequest(
  shopCode: number,
  shopBankID: number,
  amount: number,
  note?: string,
  userId?: number,
  password?: string
) {
  // Ki·ªÉm tra shop t·ªìn t·∫°i
  const shop = await payoutModel.getShop(shopCode);
  if (!shop) {
    throw new ApiError(StatusCodes.NOT_FOUND, "Kh√¥ng t√¨m th·∫•y shop");
  }

  // X√°c nh·∫≠n m·∫≠t kh·∫©u n·∫øu c√≥ userId
  if (userId && password) {
    const user = await payoutModel.getUser(userId);
    if (!user) {
      throw new ApiError(StatusCodes.NOT_FOUND, "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng");
    }

    // Verify password using authService (same as login)
    const isPasswordValid = await authService.verifyPassword(
      password,
      user.PasswordHash
    );

    if (!isPasswordValid) {
      throw new ApiError(StatusCodes.UNAUTHORIZED, "M·∫≠t kh·∫©u kh√¥ng ch√≠nh x√°c");
    }
  }

  // Ki·ªÉm tra bank account t·ªìn t·∫°i
  const bankAccount = await payoutModel.getBankAccount(
    shopCode,
    shopBankID || undefined
  );

  if (!bankAccount) {
    // Debug: Check what accounts exist for this shop
    const allAccounts = await payoutModel.getAllBankAccounts(shopCode);
    console.log(
      `[Payout] All bank accounts for shopCode ${shopCode}:`,
      allAccounts
    );

    throw new ApiError(
      StatusCodes.NOT_FOUND,
      "Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n ng√¢n h√†ng. Vui l√≤ng ch·ªçn ho·∫∑c th√™m t√†i kho·∫£n."
    );
  }

  // Ki·ªÉm tra s·ªë d∆∞
  const balance = await payoutModel.getWalletBalance(shopCode);
  if (balance < amount) {
    throw new ApiError(StatusCodes.BAD_REQUEST, "S·ªë d∆∞ kh√¥ng ƒë·ªß");
  }

  // T·∫°o payout request
  const payoutID = await payoutModel.createPayoutRequest(
    shopCode,
    shopBankID,
    amount,
    note
  );

  // ‚≠ê IMMEDIATELY DEDUCT FROM WALLET (Tr·ª´ ngay)
  await payoutModel.deductWallet(shopCode, amount);

  // T·∫°o wallet transaction
  await payoutModel.createWalletTransaction(
    shopCode,
    "debit_payout",
    amount,
    "Y√™u c·∫ßu r√∫t ti·ªÅn",
    "pending",
    payoutID
  );

  // ‚≠ê SEND EMAIL TO ADMIN
  try {
    const emailContent = `
<h2>üîî Y√™u C·∫ßu R√∫t Ti·ªÅn M·ªõi</h2>
<p><strong>Shop:</strong> ${shop.ShopName}</p>
<p><strong>M√£ Y√™u C·∫ßu:</strong> PAYOUT-${payoutID}</p>
<p><strong>S·ªë Ti·ªÅn:</strong> ${amount.toLocaleString("vi-VN")}ƒë</p>
<p><strong>Ng√¢n H√†ng:</strong> ${bankAccount.BankName}</p>
<p><strong>S·ªë T√†i Kho·∫£n:</strong> ${bankAccount.AccountNumber}</p>
<p><strong>Ch·ªß T√†i Kho·∫£n:</strong> ${bankAccount.AccountHolder}</p>
<p><strong>Ghi Ch√∫:</strong> ${note || "N/A"}</p>
<p><strong>Th·ªùi Gian:</strong> ${new Date().toLocaleString("vi-VN")}</p>
<hr>
<p>Vui l√≤ng x√°c nh·∫≠n v√† x·ª≠ l√Ω y√™u c·∫ßu n√†y trong admin dashboard.</p>
    `;

    await sendMail(
      "thuere2004@gmail.com",
      `[Y√™u C·∫ßu R√∫t Ti·ªÅn] ${shop.ShopName} - ${amount.toLocaleString(
        "vi-VN"
      )}ƒë`,
      emailContent
    );
  } catch (e) {
    console.error("L·ªói g·ª≠i email:", e);
    // Kh√¥ng throw, ti·∫øp t·ª•c x·ª≠ l√Ω
  }

  return {
    payoutID,
    shopCode,
    amount,
    status: "requested",
    requestedAt: new Date(),
  };
}

/**
 * L·∫•y chi ti·∫øt payout request
 */
export async function getPayoutByID(payoutID: number) {
  return await payoutModel.getPayoutByID(payoutID);
}

/**
 * Li·ªát k√™ payout requests c·ªßa shop
 */
export async function listPayoutsByShop(
  shopCode: number,
  status?: string,
  limit: number = 10,
  offset: number = 0
) {
  return await payoutModel.listPayoutsByShop(shopCode, status, limit, offset);
}

/**
 * Li·ªát k√™ t·∫•t c·∫£ payout requests (admin)
 */
export async function listAllPayouts(
  status?: string,
  shopCode?: number,
  limit: number = 10,
  offset: number = 0
) {
  return await payoutModel.listAllPayouts(status, shopCode, limit, offset);
}

/**
 * Duy·ªát r√∫t ti·ªÅn (admin)
 */
export async function approvePayoutRequest(payoutID: number, note?: string) {
  const payout = await payoutModel.getPayoutByID(payoutID);
  if (!payout) {
    throw new ApiError(StatusCodes.NOT_FOUND, "Kh√¥ng t√¨m th·∫•y payout request");
  }

  if (payout.Status !== "requested") {
    throw new ApiError(
      StatusCodes.BAD_REQUEST,
      "Ch·ªâ c√≥ th·ªÉ duy·ªát payout ·ªü tr·∫°ng th√°i 'requested'"
    );
  }

  // C·∫≠p nh·∫≠t payout status
  await payoutModel.approvePayoutRequest(payoutID);

  // ‚≠ê UPDATE wallet transaction status from pending to completed
  // (Wallet ƒë√£ b·ªã tr·ª´ ngay khi t·∫°o request)
  await payoutModel.completeWalletTransaction(payoutID);

  return {
    success: true,
    payoutID,
    status: "paid",
    processedAt: new Date(),
  };
}

/**
 * T·ª´ ch·ªëi r√∫t ti·ªÅn (admin)
 */
export async function rejectPayoutRequest(payoutID: number, reason: string) {
  const payout = await payoutModel.getPayoutByID(payoutID);
  if (!payout) {
    throw new ApiError(StatusCodes.NOT_FOUND, "Kh√¥ng t√¨m th·∫•y payout request");
  }

  if (payout.Status !== "requested") {
    throw new ApiError(
      StatusCodes.BAD_REQUEST,
      "Ch·ªâ c√≥ th·ªÉ t·ª´ ch·ªëi payout ·ªü tr·∫°ng th√°i 'requested'"
    );
  }

  // C·∫≠p nh·∫≠t payout status
  await payoutModel.rejectPayoutRequest(payoutID, reason);

  return {
    success: true,
    payoutID,
    status: "rejected",
    rejectionReason: reason,
  };
}

/**
 * L·∫•y th·ªëng k√™ wallet
 */
export async function getShopWalletStats(shopCode: number) {
  return await payoutModel.getWalletStats(shopCode);
}

const payoutService = {
  createPayoutRequest,
  getPayoutByID,
  listPayoutsByShop,
  listAllPayouts,
  approvePayoutRequest,
  rejectPayoutRequest,
  getShopWalletStats,
};

export default payoutService;
