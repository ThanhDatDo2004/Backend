import { RowDataPacket, ResultSetHeader } from "mysql2";
import queryService from "./query";
import ApiError from "../utils/apiErrors";
import { StatusCodes } from "http-status-codes";
import authService from "./auth";
import mailService from "./mail.service";

/**
 * T·∫°o y√™u c·∫ßu r√∫t ti·ªÅn
 */
export async function createPayoutRequest(
  shopCode: number,
  shopBankID: number,
  amount: number,
  note?: string,
  userId?: number,
  password?: string
) {
  // Ki·ªÉm tra shop t·ªìn t·∫°i
  const [shopRows] = await queryService.query<RowDataPacket[]>(
    `SELECT ShopCode, ShopName, UserID FROM Shops WHERE ShopCode = ?`,
    [shopCode]
  );
  if (!shopRows?.[0]) {
    throw new ApiError(StatusCodes.NOT_FOUND, "Kh√¥ng t√¨m th·∫•y shop");
  }

  const shop = shopRows[0];

  // X√°c nh·∫≠n m·∫≠t kh·∫©u n·∫øu c√≥ userId
  if (userId && password) {
    const [userRows] = await queryService.query<RowDataPacket[]>(
      `SELECT PasswordHash FROM Users WHERE UserID = ?`,
      [userId]
    );

    if (!userRows?.[0]) {
      throw new ApiError(StatusCodes.NOT_FOUND, "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng");
    }

    const user = userRows[0];

    // Verify password using authService (same as login)
    const isPasswordValid = await authService.verifyPassword(
      password,
      user.PasswordHash
    );

    if (!isPasswordValid) {
      throw new ApiError(StatusCodes.UNAUTHORIZED, "M·∫≠t kh·∫©u kh√¥ng ch√≠nh x√°c");
    }
  }

  // Ki·ªÉm tra bank account t·ªìn t·∫°i
  // N·∫øu bank_id = 0, l·∫•y t√†i kho·∫£n default
  let bankQuery: string;
  let bankParams: any[];

  if (shopBankID === 0 || !shopBankID) {
    // L·∫•y t√†i kho·∫£n ng√¢n h√†ng m·∫∑c ƒë·ªãnh
    bankQuery = `SELECT ShopBankID, BankName, AccountNumber, AccountHolder, IsDefault 
                 FROM Shop_Bank_Accounts 
                 WHERE ShopCode = ? AND (IsDefault = 'Y' OR IsDefault = 1)`;
    bankParams = [shopCode];
    console.log(`[Payout] Looking for DEFAULT account - shopCode: ${shopCode}`);
  } else {
    // L·∫•y t√†i kho·∫£n ng√¢n h√†ng c·ª• th·ªÉ
    bankQuery = `SELECT ShopBankID, BankName, AccountNumber, AccountHolder, IsDefault 
                 FROM Shop_Bank_Accounts 
                 WHERE ShopBankID = ? AND ShopCode = ?`;
    bankParams = [shopBankID, shopCode];
    console.log(`[Payout] Looking for SPECIFIC account - bank_id: ${shopBankID}, shopCode: ${shopCode}`);
  }

  const [bankRows] = await queryService.query<RowDataPacket[]>(
    bankQuery,
    bankParams
  );
  
  console.log(`[Payout] Bank query result:`, {
    query: bankQuery.substring(0, 50) + '...',
    params: bankParams,
    rowCount: bankRows?.length || 0,
    data: bankRows?.[0] || null
  });

  if (!bankRows?.[0]) {
    // Debug: Check what accounts exist for this shop
    const [allAccounts] = await queryService.query<RowDataPacket[]>(
      `SELECT ShopBankID, BankName, IsDefault, ShopCode FROM Shop_Bank_Accounts WHERE ShopCode = ?`,
      [shopCode]
    );
    console.log(`[Payout] All bank accounts for shopCode ${shopCode}:`, allAccounts);
    
    throw new ApiError(
      StatusCodes.NOT_FOUND,
      "Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n ng√¢n h√†ng. Vui l√≤ng ch·ªçn ho·∫∑c th√™m t√†i kho·∫£n."
    );
  }

  const bankAccount = bankRows[0];

  // Ki·ªÉm tra s·ªë d∆∞
  const [walletRows] = await queryService.query<RowDataPacket[]>(
    `SELECT Balance FROM Shop_Wallets WHERE ShopCode = ?`,
    [shopCode]
  );

  const balance = walletRows?.[0]?.Balance || 0;
  if (balance < amount) {
    throw new ApiError(StatusCodes.BAD_REQUEST, "S·ªë d∆∞ kh√¥ng ƒë·ªß");
  }

  // T·∫°o payout request
  const [result] = await queryService.query<ResultSetHeader>(
    `INSERT INTO Payout_Requests (
      ShopCode,
      ShopBankID,
      Amount,
      Status,
      Note,
      RequestedAt,
      CreateAt
    ) VALUES (?, ?, ?, 'requested', ?, NOW(), NOW())`,
    [shopCode, shopBankID, amount, note || null]
  );

  const payoutID = result.insertId;

  // ‚≠ê IMMEDIATELY DEDUCT FROM WALLET (Tr·ª´ ngay)
  await queryService.query<ResultSetHeader>(
    `UPDATE Shop_Wallets
     SET Balance = Balance - ?,
         UpdateAt = NOW()
     WHERE ShopCode = ?`,
    [amount, shopCode]
  );

  // T·∫°o wallet transaction
  await queryService.query<ResultSetHeader>(
    `INSERT INTO Wallet_Transactions (
      ShopCode,
      Type,
      Amount,
      Note,
      Status,
      PayoutID,
      CreateAt
    ) VALUES (?, 'debit_payout', ?, 'Y√™u c·∫ßu r√∫t ti·ªÅn', 'pending', ?, NOW())`,
    [shopCode, amount, payoutID]
  );

  // ‚≠ê SEND EMAIL TO ADMIN
  try {
    const emailContent = `
<h2>üîî Y√™u C·∫ßu R√∫t Ti·ªÅn M·ªõi</h2>
<p><strong>Shop:</strong> ${shop.ShopName}</p>
<p><strong>M√£ Y√™u C·∫ßu:</strong> PAYOUT-${payoutID}</p>
<p><strong>S·ªë Ti·ªÅn:</strong> ${amount.toLocaleString("vi-VN")}ƒë</p>
<p><strong>Ng√¢n H√†ng:</strong> ${bankAccount.BankName}</p>
<p><strong>S·ªë T√†i Kho·∫£n:</strong> ${bankAccount.AccountNumber}</p>
<p><strong>Ch·ªß T√†i Kho·∫£n:</strong> ${bankAccount.AccountHolder}</p>
<p><strong>Ghi Ch√∫:</strong> ${note || "N/A"}</p>
<p><strong>Th·ªùi Gian:</strong> ${new Date().toLocaleString("vi-VN")}</p>
<hr>
<p>Vui l√≤ng x√°c nh·∫≠n v√† x·ª≠ l√Ω y√™u c·∫ßu n√†y trong admin dashboard.</p>
    `;

    await mailService.sendMail(
      "kubjmisu1999@gmail.com",
      `[Y√™u C·∫ßu R√∫t Ti·ªÅn] ${shop.ShopName} - ${amount.toLocaleString(
        "vi-VN"
      )}ƒë`,
      emailContent
    );
  } catch (e) {
    console.error("L·ªói g·ª≠i email:", e);
    // Kh√¥ng throw, ti·∫øp t·ª•c x·ª≠ l√Ω
  }

  return {
    payoutID,
    shopCode,
    amount,
    status: "requested",
    requestedAt: new Date(),
  };
}

/**
 * L·∫•y chi ti·∫øt payout request
 */
export async function getPayoutByID(payoutID: number) {
  const [rows] = await queryService.query<RowDataPacket[]>(
    `SELECT pr.*, s.ShopName, sba.BankName, sba.AccountNumber, sba.AccountHolder, sba.IsDefault
     FROM Payout_Requests pr
     JOIN Shops s ON pr.ShopCode = s.ShopCode
     JOIN Shop_Bank_Accounts sba ON pr.ShopBankID = sba.ShopBankID
     WHERE pr.PayoutID = ?`,
    [payoutID]
  );
  return rows?.[0] || null;
}

/**
 * Li·ªát k√™ payout requests c·ªßa shop
 */
export async function listPayoutsByShop(
  shopCode: number,
  status?: string,
  limit: number = 10,
  offset: number = 0
) {
  let query = `SELECT pr.*, s.ShopName, sba.BankName, sba.AccountNumber
               FROM Payout_Requests pr
               JOIN Shops s ON pr.ShopCode = s.ShopCode
               JOIN Shop_Bank_Accounts sba ON pr.ShopBankID = sba.ShopBankID
               WHERE pr.ShopCode = ?`;
  const params: any[] = [shopCode];

  if (status) {
    query += ` AND pr.Status = ?`;
    params.push(status);
  }

  query += ` ORDER BY pr.RequestedAt DESC LIMIT ? OFFSET ?`;
  params.push(limit, offset);

  const [rows] = await queryService.query<RowDataPacket[]>(query, params);

  // Get total count
  let countQuery = `SELECT COUNT(*) as total FROM Payout_Requests WHERE ShopCode = ?`;
  const countParams: any[] = [shopCode];
  if (status) {
    countQuery += ` AND Status = ?`;
    countParams.push(status);
  }
  const [countRows] = await queryService.query<RowDataPacket[]>(
    countQuery,
    countParams
  );
  const total = countRows?.[0]?.total || 0;

  return {
    data: rows,
    pagination: { limit, offset, total },
  };
}

/**
 * Li·ªát k√™ t·∫•t c·∫£ payout requests (admin)
 */
export async function listAllPayouts(
  status?: string,
  shopCode?: number,
  limit: number = 10,
  offset: number = 0
) {
  let query = `SELECT pr.*, s.ShopName, s.UserID, u.FullName, sba.BankName, sba.AccountNumber, sba.AccountHolder, sba.IsDefault
               FROM Payout_Requests pr
               JOIN Shops s ON pr.ShopCode = s.ShopCode
               JOIN Users u ON s.UserID = u.UserID
               JOIN Shop_Bank_Accounts sba ON pr.ShopBankID = sba.ShopBankID
               WHERE 1=1`;
  const params: any[] = [];

  if (status) {
    query += ` AND pr.Status = ?`;
    params.push(status);
  }

  if (shopCode) {
    query += ` AND pr.ShopCode = ?`;
    params.push(shopCode);
  }

  query += ` ORDER BY pr.RequestedAt DESC LIMIT ? OFFSET ?`;
  params.push(limit, offset);

  const [rows] = await queryService.query<RowDataPacket[]>(query, params);

  // Get total count
  let countQuery = `SELECT COUNT(*) as total FROM Payout_Requests WHERE 1=1`;
  const countParams: any[] = [];
  if (status) {
    countQuery += ` AND Status = ?`;
    countParams.push(status);
  }
  if (shopCode) {
    countQuery += ` AND ShopCode = ?`;
    countParams.push(shopCode);
  }
  const [countRows] = await queryService.query<RowDataPacket[]>(
    countQuery,
    countParams
  );
  const total = countRows?.[0]?.total || 0;

  return {
    data: rows,
    pagination: { limit, offset, total },
  };
}

/**
 * Duy·ªát r√∫t ti·ªÅn (admin)
 */
export async function approvePayoutRequest(payoutID: number, note?: string) {
  const payout = await getPayoutByID(payoutID);
  if (!payout) {
    throw new ApiError(StatusCodes.NOT_FOUND, "Kh√¥ng t√¨m th·∫•y payout request");
  }

  if (payout.Status !== "requested") {
    throw new ApiError(
      StatusCodes.BAD_REQUEST,
      "Ch·ªâ c√≥ th·ªÉ duy·ªát payout ·ªü tr·∫°ng th√°i 'requested'"
    );
  }

  // C·∫≠p nh·∫≠t payout status
  const [result] = await queryService.query<ResultSetHeader>(
    `UPDATE Payout_Requests
     SET Status = 'paid',
         ProcessedAt = NOW(),
         TransactionCode = CONCAT('PAYOUT-', DATE_FORMAT(NOW(), '%Y%m%d'), '-', LPAD(?, 6, '0')),
         UpdateAt = NOW()
     WHERE PayoutID = ?`,
    [payoutID, payoutID]
  );

  // ‚≠ê UPDATE wallet transaction status from pending to completed
  // (Wallet ƒë√£ b·ªã tr·ª´ ngay khi t·∫°o request)
  await queryService.query<ResultSetHeader>(
    `UPDATE Wallet_Transactions
     SET Status = 'completed',
         UpdateAt = NOW()
     WHERE PayoutID = ? AND Type = 'debit_payout'`,
    [payoutID]
  );

  return {
    success: true,
    payoutID,
    status: "paid",
    processedAt: new Date(),
  };
}

/**
 * T·ª´ ch·ªëi r√∫t ti·ªÅn (admin)
 */
export async function rejectPayoutRequest(payoutID: number, reason: string) {
  const payout = await getPayoutByID(payoutID);
  if (!payout) {
    throw new ApiError(StatusCodes.NOT_FOUND, "Kh√¥ng t√¨m th·∫•y payout request");
  }

  if (payout.Status !== "requested") {
    throw new ApiError(
      StatusCodes.BAD_REQUEST,
      "Ch·ªâ c√≥ th·ªÉ t·ª´ ch·ªëi payout ·ªü tr·∫°ng th√°i 'requested'"
    );
  }

  // C·∫≠p nh·∫≠t payout status
  await queryService.query<ResultSetHeader>(
    `UPDATE Payout_Requests
     SET Status = 'rejected',
         RejectionReason = ?,
         ProcessedAt = NOW(),
         UpdateAt = NOW()
     WHERE PayoutID = ?`,
    [reason, payoutID]
  );

  return {
    success: true,
    payoutID,
    status: "rejected",
    rejectionReason: reason,
  };
}

/**
 * L·∫•y th·ªëng k√™ wallet
 */
export async function getShopWalletStats(shopCode: number) {
  const [walletRows] = await queryService.query<RowDataPacket[]>(
    `SELECT Balance FROM Shop_Wallets WHERE ShopCode = ?`,
    [shopCode]
  );

  const balance = walletRows?.[0]?.Balance || 0;

  // Get total credited
  const [creditRows] = await queryService.query<RowDataPacket[]>(
    `SELECT SUM(Amount) as total FROM Wallet_Transactions
     WHERE ShopCode = ? AND Type = 'credit_settlement' AND Status = 'completed'`,
    [shopCode]
  );

  const totalCredit = creditRows?.[0]?.total || 0;

  // Get total debited
  const [debitRows] = await queryService.query<RowDataPacket[]>(
    `SELECT SUM(Amount) as total FROM Wallet_Transactions
     WHERE ShopCode = ? AND Type = 'debit_payout' AND Status = 'completed'`,
    [shopCode]
  );

  const totalDebit = debitRows?.[0]?.total || 0;

  return {
    balance,
    totalCredit,
    totalDebit,
    available: balance,
  };
}

const payoutService = {
  createPayoutRequest,
  getPayoutByID,
  listPayoutsByShop,
  listAllPayouts,
  approvePayoutRequest,
  rejectPayoutRequest,
  getShopWalletStats,
};

export default payoutService;
